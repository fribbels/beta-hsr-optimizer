TODOs:

function defaultCharacter(e) {
  let value = (e >= 0) ? -1 : -1

  let basicScaling = basic(e, 1.00, 1.10)
  let skillScaling = skill(e, -1, -1)
  let ultScaling = ult(e, -1, -1)

  return {
    display: () => (
      <Flex vertical gap={10} >
        <FormSwitch name='talentName' text='Text'/>
        <FormSlider name='talentHpDrainAtkBuff' text='HP drain ATK buff' min={0} max={0} percent />
      </Flex>
    ),
    defaults: () => ({
      talentName: true,
      switchEnabledName: true,
      sliderName: 0,
    }),
    precomputeEffects: (request) => {
      let r = request.characterConditionals
      let x = Object.assign({}, baseComputedStatsObject)

      // Stats

      // Scaling
      x.BASIC_SCALING += basicScaling
      x.SKILL_SCALING += skillScaling
      x.ULT_SCALING += ultScaling

      // Boost

      return x
    },
    calculatePassives: (c, request) => {

    },
    calculateBaseMultis: (c, request) => {
      let r = request.characterConditionals
      let x = c.x

      x.BASIC_DMG += x.BASIC_SCALING * x[Stats.ATK]
      x.SKILL_DMG += x.SKILL_SCALING * x[Stats.ATK]
      x.ULT_DMG += x.ULT_SCALING * x[Stats.ATK]
      // x.FUA_DMG += 0
    }
  }
}